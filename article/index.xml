<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Fancy‘s Blog</title>
    <link>https://bbyy.io/article/</link>
    <description>Recent content in Articles on Fancy‘s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Jan 2019 12:13:48 +0800</lastBuildDate>
    
	<atom:link href="https://bbyy.io/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>uWSGI和Gunicorn對比實踐筆記</title>
      <link>https://bbyy.io/article/uwsgi-gunicorn/</link>
      <pubDate>Sun, 27 Jan 2019 12:13:48 +0800</pubDate>
      
      <guid>https://bbyy.io/article/uwsgi-gunicorn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;從flask微信公眾號後臺分析
Ubuntu+Python3+pipenv+flask環境下 uWSGI/Gunicorn+supervisor+nginx配置問題&lt;/p&gt;
&lt;p&gt;這裏的示例程序代碼接上篇&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//fancysly.com/post/9&#34;&gt;使用Flask創建微信公眾號&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在服務器能正常通信後，Werkzeug提供的的WSGI並不適合生產環境，調試完代碼第一件事就找個獨立WSGI容器。我們這裏選擇uWSGI和gunicorn，相對來說這兩個比gevent更適合大型項目，uWSGI出現的比較早，gunicorn是從Ruby的unicorn移植而來，配置也簡單。為了熟悉uwsgi我都嘗試一下吧&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Flask創建微信公眾號</title>
      <link>https://bbyy.io/article/flask-wechat-official-accounts/</link>
      <pubDate>Mon, 26 Nov 2018 13:07:13 +0800</pubDate>
      
      <guid>https://bbyy.io/article/flask-wechat-official-accounts/</guid>
      <description>&lt;p&gt;基於Flask搭建微信公眾號後台&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>